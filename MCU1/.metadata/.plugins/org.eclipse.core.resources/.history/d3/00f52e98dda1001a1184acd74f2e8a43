/*
 * stm32f446xx__spi_driver.c
 *
 *  Created on: May 29, 2020
 *      Author: Admin
 */
#include "stm32f446xx_spi_driver.h"
#include <stdint.h>
/*********************************************************************
 * @fn      		  - SPI_PeriClkCtrl
 *
 * @brief             - This function enables or disables peripheral clock
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -  none
 *
 * @Note              -  none

 */
void SPI_PeriClkCtrl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi);
{
	if(EnOrDi == ENABLE)
		{
			if(pSPIx == SPI1)
					{
					GPIOA_PCLK_EN();
					}
			else if(pGPIOx == GPIOB)
					{
					GPIOB_PCLK_EN();
					}
			else if(pGPIOx == GPIOC)
					{
					GPIOC_PCLK_EN();
					}
			else if(pGPIOx == GPIOD)
					{
					GPIOD_PCLK_EN();
					}
			else if(pGPIOx == GPIOE)
					{
					GPIOE_PCLK_EN();
					}
			else if(pGPIOx == GPIOF)
					{
					GPIOF_PCLK_EN();
					}
			else if(pGPIOx == GPIOG)
					{
					GPIOG_PCLK_EN();
					}
			else if(pGPIOx == GPIOH)
					{
					GPIOH_PCLK_EN();
					}
		}

		else
		{
			//todo
		}
}

/*********************************************************************
 * @fn      		  - SPI_Init
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -  none
 *
 * @Note              -  none

 */
void SPI_Init(SPI_Handle_t *pSPIHandle);
void SPI_DeInit(SPI_RegDef_t *pSPIx);

/*
 * Data transmit and receive
 * blocking type - non-interrupt based
 * non-blocking type - interrupt based
 */
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxbuffer, uint32_t Len);
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pRxbuffer, uint32_t Len);

/*
 * IRQ configuration and ISR handling
 */
void SPI_IRQITConfig(uint8_t IRQNumber,  uint8_t EnorDi);
void SPI_IRQPriorityConfig(uint8_t IRQNumber,uint8_t IRQPriority);
void SPI_IRQHandling(SPI_Handle_t *pHandle);
